"""
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be:

 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over 5 divisors.

What is the value of the first triangle number to have over 500 divisors?

Usage:
    problem_12.py <num_divisors> [options]

Options:
    -h --help        shows this screen.
"""
from docopt import docopt


def get_num_divisors(num):
    """
    Get how many divisors a number has

    :param num: The number to get divisors for
    :type num: int()
    :returns: The number of divisors <num> as
    :rtype: int()
    """
    if num == 1:
        return 1
    current_number = 1
    num_divisors = 0
    while current_number*current_number <= num:
        if num % current_number == 0:
            num_divisors += 2
        current_number += 1
    return num_divisors


def run(num_divisors):
    """
    Provided min number of divisors find lowest number that
    has x amount of divisors.

    :param num_divisors: How many divisors to check for
    :type num_divisors: int()
    :returns: The first number to have <num_divisors>
    :rtype: int()
    """
    number = 1
    next_number = 2
    max_factors = 0
    while True:
        divisors = get_num_divisors(number)
        if divisors > num_divisors:
            max_factors = divisors
            return number
        if divisors > max_factors:
            max_factors = divisors
        number = number + next_number
        next_number += 1


if __name__ == '__main__':
    args = docopt(__doc__)
    print("Answer: %d" % run(int(args['<num_divisors>'])))
